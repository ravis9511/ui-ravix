---
const generateUniqueId = () => {
  const timestamp = Date.now().toString().slice(-6);
  const randomNum = Math.floor(Math.random() * 10000)
    .toString()
    .padStart(4, "0");
  return timestamp + randomNum;
}; // To create a somewhat unique ID for the accordion

const componentId = generateUniqueId();
interface AccordionPanel {
  header: string;
  content: string;
}

interface AccordionProps {
  panels: AccordionPanel[];
}
const { panels = [] } = Astro.props as AccordionProps;
/*
To call this component, you can use the code below 
// YourPage.astro
---
import Accordion from './Accordion.astro';

const panels = [
  {
    header: 'Panel 1 Header',
    content: 'This is the content for Panel 1.',
  },
  {
    header: 'Panel 2 Header',
    content: 'This is the content for Panel 2.You can include any HTML elements or components here.',
  },
  {
    header: 'Panel 3 Header',
    content: 'This is the content for Panel 3.',
  },
  // Add more panels as needed
];
---
<Accordion panels={panels} />

if you want more complex content, you can send the content as HTML and use a fragment to render it.
{panel.content} will become <Fragment set:html={panel.content} /> but this is not tested and may cause unexpected behaviours.
*/
---

<div
  id="accordion-container-alt"
  class="mb-12 max-w-3xl divide-y divide-gray-400 rounded-lg dark:divide-zinc-800"
>
  {
    panels.map((panel: AccordionPanel, index: number) => (
      <div class="group text-zinc-900 dark:text-zinc-300">
        <button
          data-accordion="button"
          type="button"
          class="group/button peer flex w-full cursor-pointer items-center justify-between rounded-lg px-4 py-4 text-start outline-gray-600 focus:outline-2 aria-expanded:bg-gray-200 motion-safe:transition-colors motion-safe:duration-300 motion-safe:ease-in dark:outline-zinc-500 dark:aria-expanded:bg-zinc-900"
          aria-expanded="false"
          id={`${componentId}-button-${index + 1}`}
          aria-controls={`${componentId}-panel-${index + 1}`}
        >
          <h3 class="text-base font-medium md:text-lg">{panel.header}</h3>
          <svg
            class="h-5 w-5 shrink-0 group-aria-expanded/button:-rotate-180 motion-safe:transition motion-safe:duration-300"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M19 9l-7 7-7-7"
            />
          </svg>
        </button>

        <section
          data-accordion="panel"
          aria-hidden="true"
          id={`${componentId}-panel-${index + 1}`}
          class="max-h-0 overflow-hidden opacity-30 peer-aria-expanded:max-h-screen peer-aria-expanded:opacity-100 motion-safe:transition-all motion-safe:duration-300 motion-safe:ease-in-out"
          aria-labelledby={`${componentId}-button-${index + 1}`}
          role="region"
        >
          <div class="rounded-lg px-6 py-4 text-start text-base md:py-5">
            {panel.content}
          </div>
        </section>
      </div>
    ))
  }
</div>

<!-- Add more accordion items as needed -->

<script>
  /**
   * Sets up the accordion functionality for an accordion container with the ID "accordion-container-alt".
   *
   * This function retrieves the accordion container element, the accordion buttons, and the accordion panels.
   * It then adds a click event listener to each accordion button, which toggles the visibility of the corresponding accordion panel.
   *
   * The function is called when the "astro:after-swap" and "astro:page-load" events are triggered.
   */
  function setAccordion() {
    /**
     * Retrieves the accordion container element by its ID.
     * @returns {HTMLElement} The accordion container element, or `null` if not found.
     * @returns {NodeListOf<HTMLElement>} The list of accordion buttons, or an empty list if not found.
     * @returns {NodeListOf<HTMLElement>} The list of accordion panels, or an empty list if not found.
     * selectedPanel is an HTMLElement that represents the currently selected panel.
     */

    const accordion = document.getElementById(
      "accordion-container-alt",
    ) as HTMLElement;
    if (!accordion) return;
    const buttons = accordion?.querySelectorAll(
      '[data-accordion="button"]',
    ) as NodeListOf<HTMLElement>;
    const panels = accordion?.querySelectorAll(
      '[data-accordion="panel"]',
    ) as NodeListOf<HTMLElement>;

    var selectedPanel: HTMLElement;

    /**
     * Adds click event listeners to accordion buttons and toggles the visibility of the corresponding accordion panels.
     * When a button is clicked, it sets the `aria-expanded` attribute to `true` and hides all other panels.
     * The selected panel is then shown by setting its `aria-hidden` attribute to `false`.
     */
    buttons?.forEach((button) => {
      button.addEventListener("click", () => {
        panels?.forEach((panel) => {
          if (panel.id === button.getAttribute("aria-controls")) {
            selectedPanel = panel;
          }
          panel.setAttribute("aria-hidden", "true");
        });
        if (button.getAttribute("aria-expanded") === "true") {
          button.setAttribute("aria-expanded", "false");

          return;
        } else {
          buttons.forEach((button) => {
            button.setAttribute("aria-expanded", "false");
          });

          selectedPanel?.setAttribute("aria-hidden", "false");
          button.setAttribute("aria-expanded", "true");
          return;
        }
      });
    });
  }

  document.addEventListener("astro:page-load", setAccordion);
</script>
