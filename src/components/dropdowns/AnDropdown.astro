---

---

<div class="group relative inline-flex text-left">
  <button
    type="button"
    class="group/button peer inline-flex w-full justify-center gap-x-1.5 rounded-md bg-white dark:bg-zinc-900 px-3 py-2 text-sm font-semibold text-gray-900 dark:text-gray-100 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 dark:ring-zinc-800 dark:hover:bg-zinc-700"
    id="menu-button-2"
    aria-expanded="false"
    aria-haspopup="true">
    Options
    <svg
      class="-mr-1 h-5 w-5 transition duration-500 text-gray-400 group-aria-expanded/button:-rotate-180"
      viewBox="0 0 20 20"
      fill="currentColor"
      aria-hidden="true">
      <path
        fill-rule="evenodd"
        d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
        clip-rule="evenodd"
      ></path>
    </svg>
  </button>

  <ul
    aria-orientation="vertical"
    aria-labelledby="menu-button-2"
    class="absolute transition-all ease-in-out duration-500 right-0 max-h-0 overflow-hidden opacity-40 peer-aria-expanded:max-h-96 min-w-max peer-aria-expanded:opacity-100 top-8 z-10 mt-2 origin-top-right rounded-md bg-white text-gray-800 dark:text-gray-200 dark:bg-zinc-900 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
    id="dropdown-menu-2"
    aria-hidden="true"
    tabindex="-1">
    <li
      tabindex="-1"
      id="menu-item-0">
      <a
        href="#"
        tabindex="-1"
        class="block px-4 py-2.5 text-sm hover:bg-gray-100 dark:hover:bg-zinc-700 my-1"
        >Account settings</a
      >
    </li>
    <li
      tabindex="-1"
      id="menu-item-1">
      <a
        href="#"
        tabindex="-1"
        class="block px-4 py-2.5 text-sm hover:bg-gray-100 dark:hover:bg-zinc-700 my-1"
        >Support</a
      >
    </li>
    <li
      tabindex="-1"
      id="menu-item-2">
      <a
        href="#"
        tabindex="-1"
        class="block px-4 py-2.5 text-sm hover:bg-gray-100 dark:hover:bg-zinc-700 my-1"
        >License</a
      >
    </li>
    <li
      tabindex="-1"
      id="menu-item-3">
      <form
        method="POST"
        action="#">
        <button
          type="submit"
          tabindex="-1"
          class="block w-full px-4 py-2.5 text-left text-sm hover:bg-gray-100 dark:hover:bg-zinc-700 my-1"
          >Sign out</button
        >
      </form>
    </li>
  </ul>
</div>

<script>
  /**
   * Initializes the menu functionality for a dropdown menu.
   * This function sets up event listeners for the dropdown button and menu items,
   * allowing the user to open and navigate the dropdown menu using the keyboard.
   * The function also handles closing the menu when the user clicks outside of it.
   */
  function menuInitilization() {
    const button = document.getElementById("menu-button-2");
    const dropdown = document.getElementById("dropdown-menu-2");
    const dropdownItems = dropdown?.querySelectorAll("li");
    button?.addEventListener("click", () => {
      button.getAttribute("aria-expanded") === "true"
        ? button.setAttribute("aria-expanded", "false")
        : button.setAttribute("aria-expanded", "true");
      if (dropdown?.getAttribute("aria-hidden") === "true") {
        dropdown.setAttribute("aria-hidden", "false");

        /**
         * Handles keyboard navigation and interactions for a dropdown menu.
         *
         * When the dropdown is focused, the following keyboard interactions are supported:
         * - Arrow Up/Down: Moves the focus to the previous/next item in the dropdown
         * - Escape: Closes the dropdown
         * - Enter: Clicks the currently focused dropdown item
         */
        if (dropdownItems) {
          dropdown.focus();
          let tabFocus = 0;

          dropdown.addEventListener("keydown", (keyboardEvent) => {
            const e = keyboardEvent as KeyboardEvent;

            if (e.key === "ArrowUp" || e.key === "ArrowDown") {
              e.preventDefault();
              dropdownItems[tabFocus].setAttribute("tabindex", "-1");
              if (e.key === "ArrowDown") {
                tabFocus++;
                // If we're at the end, go to the start
                if (tabFocus >= dropdownItems.length) {
                  tabFocus = 0;
                }
                // Move left
              } else if (e.key === "ArrowUp") {
                tabFocus--;
                // If we're at the start, move to the end
                if (tabFocus < 0) {
                  tabFocus = dropdownItems.length - 1;
                }
              }
              tabFocus = tabFocus % dropdownItems.length;
              dropdownItems[tabFocus].focus();
            } else if (e.key === "Escape") {
              dropdown.setAttribute("aria-hidden", "true");
              button.setAttribute("aria-expanded", "false");
              document.documentElement.removeEventListener("click", closeMenu);
            } else if (e.key === "Enter") {
              (dropdownItems[tabFocus].children[0] as HTMLElement)?.click();
              dropdown.setAttribute("aria-hidden", "true");
              button.setAttribute("aria-expanded", "false");
              document.documentElement.removeEventListener("click", closeMenu);
            } else if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
              e.preventDefault();

              if (e.key === "ArrowRight") {
                tabFocus = dropdownItems.length - 1;
              } else if (e.key === "ArrowLeft") {
                tabFocus = 0;
              }
              tabFocus = tabFocus % dropdownItems.length;
              dropdownItems[tabFocus].focus();
            }
          });
        }
      } else {
        dropdown?.setAttribute("aria-hidden", "true");
      }

      document.documentElement.addEventListener("click", closeMenu);
      let tabFocus = 0;
    });
  }
  function closeMenu(event: Event) {
    const button = document.getElementById("menu-button-2");
    const dropdown = document.getElementById("dropdown-menu-2");
    if (!button?.contains(event.target as Node)) {
      button?.setAttribute("aria-expanded", "false");
      dropdown?.setAttribute("aria-hidden", "true");
      document.documentElement.removeEventListener("click", closeMenu);
    }
  }
  document.addEventListener("astro:before-swap", menuInitilization);
  document.addEventListener("astro:page-load", menuInitilization);
</script>
