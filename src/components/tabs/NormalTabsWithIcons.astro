---
const tabs = [
  {
    title: "Product",
    content: "This is placeholder content for the product tab",
    icon: "product",
  },
  {
    title: "Info",
    content: "This is placeholder content for the info tab",
    icon: "info",
  },
  {
    title: "Compare",
    content: "This is placeholder content for the compare tab",
    icon: "compare",
  },
];

/*
This uses conditional rendering to render the SVGs, but generally you would import them from a separate file like so :
---
import Product from "../../assets/product.astro"
import Info from "../../assets/info.astro"
import Compare from "../../assets/compare.astro"
---
Note : svg files can be saved as .astro files and imported as above without changing any code inside the file.

and you would render them like this :
{tab.icon === "product" && <Product />}
{tab.icon === "info" && <Info />}
{tab.icon === "compare" && <Compare />}

This will aid in the separation of concerns and make the code more maintainable.
*/
---

<div id="tab-container-icons">
  <div class="text-zinc-900 dark:text-zinc-50 mb-12">
    <div
      class="flex flex-row w-full my-4 p-[4px] bg-gray-100 rounded-xl border-gray-300 dark:bg-zinc-950 border dark:border-zinc-800 gap-x-4"
      role="tablist">
      {
        tabs.map((tab, index) => (
          <button
            role="tab"
            aria-selected={index === 0 ? "true" : "false"}
            aria-controls={`tab-panel-${index + 1}`}
            id={`tab-${index + 1}`}
            class="cursor-pointer w-full px-6 py-3 text-lg rounded-lg flex justify-center flex-row items-center space-x-3 hover:bg-gray-200 dark:hover:bg-zinc-800 aria-selected:bg-indigo-700 dark:aria-selected:bg-indigo-900 aria-selected:text-gray-100">
            {tab.icon === "product" && (
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24" aria-hidden="true">
                <path
                  fill="currentColor"
                  d="M7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2s-.9-2-2-2M1 2v2h2l3.6 7.59l-1.35 2.45c-.16.28-.25.61-.25.96c0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12l.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.58-6.49A1.003 1.003 0 0 0 20 4H5.21l-.94-2zm16 16c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2s2-.9 2-2s-.9-2-2-2"
                />
              </svg>
            )}
            {tab.icon === "info" && (
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24" aria-hidden="true">
                <path
                  fill="currentColor"
                  d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10s10-4.48 10-10S17.52 2 12 2m1 15h-2v-6h2zm0-8h-2V7h2z"
                />
              </svg>
            )}
            {tab.icon === "compare" && (
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24" aria-hidden="true">
                <path
                  fill="currentColor"
                  d="M9.01 14H2v2h7.01v3L13 15l-3.99-4zm5.98-1v-3H22V8h-7.01V5L11 9z"
                />
              </svg>
            )}

            <span>{tab.title}</span>
          </button>
        ))
      }
    </div>
    <div
      class="p-[4px] bg-gray-100 rounded-xl border-gray-300 dark:bg-zinc-950 border dark:border-zinc-800 text-zinc-800 dark:text-zinc-200">
      {
        tabs.map((tab, index) => (
          <section
            role="tabpanel"
            id={`tab-panel-${index + 1}`}
            tabindex="0"
            class={index === 0 ? "" : "hidden"}>
            <p class="p-4">{tab.content}</p>
          </section>
        ))
      }
    </div>
  </div>
</div>
<script is:inline>
  function normalTabsWithIcons() {
  const tabContainer = document.getElementById('tab-container-icons');
      const tabs = tabContainer?.querySelectorAll('[role="tab"]');
      const panels = tabContainer?.querySelectorAll('[role="tabpanel"]');
      const tabList = tabContainer?.querySelector('[role="tablist"]');
      let tabFocus = 0;
      tabList?.addEventListener("keydown", (e ) => {
            
            if(e.key && tabs){
            if (e.key === "ArrowRight" || e.key === "ArrowLeft") {
                tabs[tabFocus]?.setAttribute("tabindex", "-1");
            if (e.key === "ArrowRight") {
            tabFocus++;
            // If we're at the end, go to the start
            if (tabFocus >= tabs.length) {
                tabFocus = 0;
            }
            // Move left
            } else if (e.key === "ArrowLeft") {
            tabFocus--;
            // If we're at the start, move to the end
            if (tabFocus < 0) {
                tabFocus = tabs.length - 1;
            }
            }
            tabs[tabFocus].setAttribute("tabindex", "0");
            tabs[tabFocus].focus();
            }}
            }); 
      tabs?.forEach((tab) => {
        tab.addEventListener("click", () => {
          tabs.forEach((tab) => tab.setAttribute("aria-selected", "false"));
          tab.setAttribute("aria-selected", "true");
          const selectedPanel = tab.getAttribute("aria-controls");
          panels?.forEach((panel) => {
            if (panel.id === selectedPanel) {
              panel.setAttribute("tabindex", "0");
              panel.classList.remove("hidden");
            } else {
              panel.classList.add("hidden");
              panel.setAttribute("tabindex", "-1");
            }
          });
        });
      });
    }
    normalTabsWithIcons();
   
  
</script>
