---

---

<div class="relative inline-flex text-left">
  <button
    type="button"
    class="group peer inline-flex w-full justify-center items-center gap-x-1.5 rounded-md bg-indigo-700 dark:bg-indigo-950 px-4 py-3 lg:py-3 font-semibold text-sm lg:text-base text-white shadow-sm ring-1 ring-inset hover:bg-indigo-500 ring-indigo-900 dark:hover:bg-indigo-700 focus:outline-4 outline-offset-4 outline-black dark:outline-white dark:shadow-none"
    id="menu-button-alt"
    aria-expanded="false"
    aria-haspopup="true">
    Options
    <svg
      class="-mr-1 motion-safe:transition h-5 w-5 text-gray-400 group-aria-expanded:-rotate-180"
      viewBox="0 0 20 20"
      fill="currentColor"
      aria-hidden="true">
      <path
        fill-rule="evenodd"
        d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
        clip-rule="evenodd"
      ></path>
    </svg>
  </button>

  <ul
    class="hidden peer-aria-expanded:block absolute right-0 top-11 z-10 mt-2 min-w-max origin-top-right rounded-md bg-indigo-50 text-gray-800 dark:text-gray-200 dark:bg-indigo-950 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
    id="dropdown-menu-alt"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="menu-button-alt"
    tabindex="-1">
    <li
      tabindex="-1"
      role="menuitem"
      id="alt-menu-item-0">
      <a
        href="#"
        tabindex="-1"
        class="block px-4 py-3 text-sm hover:bg-indigo-200 dark:hover:bg-indigo-700 border-b border-gray-300 dark:border-zinc-700 my-1 focus:outline-4 outline-offset-4 outline-black dark:outline-white"
        >Account settings</a
      >
    </li>
    <li
      tabindex="-1"
      role="menuitem"
      id="alt-menu-item-1">
      <a
        href="#"
        tabindex="-1"
        class="block px-4 py-3 text-sm hover:bg-indigo-200 dark:hover:bg-indigo-700 border-b border-gray-300 dark:border-zinc-700 my-1 focus:outline-4 outline-offset-4 outline-black dark:outline-white"
        >Support</a
      >
    </li>
    <li
      tabindex="-1"
      role="menuitem"
      id="alt-menu-item-2">
      <a
        href="#"
        tabindex="-1"
        class="block px-4 py-3 text-sm hover:bg-indigo-200 dark:hover:bg-indigo-700 border-b border-gray-300 dark:border-zinc-700 my-1 focus:outline-4 outline-offset-4 outline-black dark:outline-white"
        >License</a
      >
    </li>
    <li
      tabindex="-1"
      role="menuitem"
      id="alt-menu-item-3">
      <form
        method="POST"
        id="alt-menu-item-form-3"
        action="#">
        <button
          type="submit"
          tabindex="-1"
          class="block w-full px-4 py-3 text-left text-sm hover:bg-indigo-200 dark:hover:bg-indigo-700 my-1 focus:outline-4 outline-offset-4 outline-black dark:outline-white"
          >Sign out</button
        >
      </form>
    </li>
  </ul>
</div>

<script>
  function menuInitilizationAlt() {
    const button = document.getElementById(
      "menu-button-alt"
    ) as HTMLButtonElement;
    const dropdown = document.getElementById(
      "dropdown-menu-alt"
    ) as HTMLUListElement;
    const dropdownItems = dropdown?.querySelectorAll(
      "li"
    ) as NodeListOf<HTMLLIElement>;
    button?.addEventListener("click", (event) => {
      event.stopPropagation();
      if (button.getAttribute("aria-expanded") === "true") {
        closeMenu();
        return;
      }
      button.setAttribute("aria-expanded", "true");

      if (dropdown && dropdownItems) {
        document.documentElement.addEventListener("click", closeMenu);
        dropdownItems[0].focus();

        let tabFocus = 0;
         /**
         * Handles keyboard navigation and interactions for a dropdown menu.
         *
         * When the dropdown is focused, the following keyboard interactions are supported:
         * - Arrow Up/Down: Moves the focus to the previous/next item in the dropdown
         * - Escape: Closes the dropdown
         * - Enter: Clicks the currently focused dropdown item
         * - Tab: Moves focus back to the button
         */
        dropdown.addEventListener("keydown", (keyboardEvent) => {
          const e = keyboardEvent as KeyboardEvent;

          if (e.key === "ArrowUp" || e.key === "ArrowDown") {
            e.preventDefault();
            if (e.key === "ArrowDown") {
              tabFocus++;
              // If we're at the end, go to the start
              if (tabFocus >= dropdownItems.length) {
                tabFocus = 0;
              }
              // Move left
            } else if (e.key === "ArrowUp") {
              tabFocus--;
              // If we're at the start, move to the end
              if (tabFocus < 0) {
                tabFocus = dropdownItems.length - 1;
              }
            }
            tabFocus = tabFocus % dropdownItems.length;
            (dropdownItems[tabFocus] as HTMLLIElement).focus();
          } else if (e.key === "Escape") {
            closeMenu();
            return;
          } else if (e.key === "Enter") {
            (dropdownItems[tabFocus].children[0] as HTMLElement)?.click();
            closeMenu();
            return;
          } else if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
            e.preventDefault();

            if (e.key === "ArrowRight") {
              tabFocus = dropdownItems.length - 1;
            } else if (e.key === "ArrowLeft") {
              tabFocus = 0;
            }
            tabFocus = tabFocus % dropdownItems.length;
            dropdownItems[tabFocus].focus();
          }
          else if (e.key === "Tab" || e.key === "Shift+Tab") {
            e.preventDefault();
            button.focus();
          }
        });
      }
    });
  }
  /**
     * Closes the menu by setting the `aria-expanded` attribute of the menu button to `false` and removing the click event listener from the document.
     */
  function closeMenu() {
    const button = document.getElementById(
      "menu-button-alt"
    ) as HTMLButtonElement;

    button?.setAttribute("aria-expanded", "false");
    button?.focus();
    document.documentElement.removeEventListener("click", closeMenu);
  }

  document.addEventListener("astro:page-load", menuInitilizationAlt);
</script>
