---
interface TableItem {
  name: string;
  color: string;
  type: string;
  stock: string;
}
/* You can use this interface above to define the structure of your data and receive it as a prop */

const tableData: TableItem[] = [
  {
    name: "T-Shirt",
    color: "Blue",
    type: "Tops",
    stock: "15",
  },
  {
    name: "Jeans",
    color: "Black",
    type: "Bottoms",
    stock: "32",
  },
  {
    name: "Sneakers",
    color: "White",
    type: "Shoes",
    stock: "23",
  },
  {
    name: "Dress",
    color: "Red",
    type: "Dresses",
    stock: "11",
  },
];
---

{tableData.length > 0 && (
  <div class="w-full overflow-x-auto shadow-md dark:shadow-lg dark:shadow-black rounded-lg border border-gray-300 dark:border-zinc-800 ">
    <table class="w-full text-base text-left text-gray-800 dark:text-gray-300  shadow-md rounded-lg dark:bg-black">
      <thead class="text-sm uppercase text-gray-700 dark:text-gray-200 bg-indigo-200 dark:bg-indigo-950/70">
        <tr>
          <th scope="col" class="px-6 py-3">Product</th>
          <th scope="col" class="px-6 py-3">Color</th>
          <th scope="col" class="px-6 py-3">Type</th>
          <th scope="col" class="px-6 py-3">Stock</th>
        </tr>
      </thead>
      <tbody class="divide-y divide-indigo-200 dark:divide-zinc-800 ">
        {tableData.map((item) => (
          <tr class="odd:bg-white odd:dark:bg-zinc-950 even:bg-indigo-50 even:dark:bg-zinc-900">

            <th scope="row" class="px-6 py-3 font-semibold text-gray-900 dark:text-gray-100 whitespace-nowrap">
              {item.name}
            </th>
            <td class="px-6 py-3">{item.color}</td>
            <td class="px-6 py-3">{item.type}</td>
            <td class="px-6 py-3">{item.stock}</td>
          </tr>
        ))}
      </tbody>
    </table>
  </div>
)}
